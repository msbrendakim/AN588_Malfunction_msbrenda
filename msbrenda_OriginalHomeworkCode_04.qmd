---
title: "AN588_Malfunction_msbrenda"
format: html
editor: visual
---

## Library

```{r}
library(tidyverse)
library(curl)
```

## Part 1: `Z.prop.test()` function

```{r}
Z.prop.test <- function(p1, n1, p0, p2 = NULL, n2 = NULL, alternative = "two.sided", conf.level = 0.95) {
  # Check normality assumption
  check_normality <- function(p, n) {
    if (n * p < 5 || n * (1 - p) < 5) {
      warning("Normality assumption may not hold: n*p or n*(1-p) < 5")
    }
  }
  
  # One-sample test
  if (is.null(p2) || is.null(n2)) {
    check_normality(p1, n1)
    se <- sqrt(p0 * (1 - p0) / n1)
    Z <- (p1 - p0) / se
    p_val <- switch(alternative,
                    "two.sided" = 2 * pnorm(-abs(Z)),
                    "greater" = 1 - pnorm(Z),
                    "less" = pnorm(Z))
    ci <- p1 + c(-1, 1) * qnorm((1 + conf.level) / 2) * sqrt(p1 * (1 - p1) / n1)
    return(list(Z = Z, P = p_val, CI = ci))
  }
  
  # Two-sample test
  check_normality(p1, n1)
  check_normality(p2, n2)
  p_pool <- (p1 * n1 + p2 * n2) / (n1 + n2)
  se <- sqrt(p_pool * (1 - p_pool) * (1 / n1 + 1 / n2))
  Z <- (p1 - p2) / se
  p_val <- switch(alternative,
                  "two.sided" = 2 * pnorm(-abs(Z)),
                  "greater" = 1 - pnorm(Z),
                  "less" = pnorm(Z))
  ci <- (p1 - p2) + c(-1, 1) * qnorm((1 + conf.level) / 2) * sqrt(p1 * (1 - p1) / n1 + p2 * (1 - p2) / n2)
  return(list(Z = Z, P = p_val, CI = ci))
}

# Test
Z.prop.test(p1 = 0.6, n1 = 100, p0 = 0.5, alternative = "two.sided")
```

## Part 2: Linear Regression Analysis

```{r}
# Load data (replace with actual file path)
c <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/refs/heads/master/AN588_Spring25/KamilarAndCooperData.csv")
data <- read.csv(c, header = TRUE, sep = ",", stringsAsFactors = FALSE)

# Linear regression: Longevity ~ Brain Size
model1 <- lm(MaxLongevity_m ~ Brain_Size_Species_Mean, data = data)

# Scatterplot with regression line
ggplot(data, aes(x = Brain_Size_Species_Mean, y = MaxLongevity_m)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE, level = 0.90) +
  geom_text(x = min(data$Brain_Size_Species_Mean, na.rm = TRUE), y = max(data$MaxLongevity_m, na.rm = TRUE),
            label = paste("y =", round(coef(model1)[1], 2), "+", round(coef(model1)[2], 2), "x"),
            hjust = 0, vjust = 1) +
  labs(x = "Brain Size (g)", y = "Longevity (months)", title = "Longevity vs Brain Size")

# Slope estimate and 90% CI
summary(model1)$coefficients
confint(model1, level = 0.90)

# Prediction for brain size = 800g
pred <- predict(model1, newdata = data.frame(Brain_Size_Species_Mean = 800), interval = "prediction", level = 0.90)
pred
```

## Log-Transformed Model

```{r}
# Log-transformed regression
data <- data %>% mutate(log_longevity = log(MaxLongevity_m), log_brain = log(Brain_Size_Species_Mean))
model2 <- lm(log_longevity ~ log_brain, data = data)

# Scatterplot
ggplot(data, aes(x = log_brain, y = log_longevity)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE, level = 0.90) +
  geom_text(x = min(data$log_brain, na.rm = TRUE), y = max(data$log_longevity, na.rm = TRUE),
            label = paste("y =", round(coef(model2)[1], 2), "+", round(coef(model2)[2], 2), "x"),
            hjust = 0, vjust = 1) +
  labs(x = "Log Brain Size", y = "Log Longevity", title = "Log Longevity vs Log Brain Size")

# Slope estimate and 90% CI
summary(model2)$coefficients
confint(model2, level = 0.90)

# Model comparison
AIC(model1, model2)
```

Since model2's AIC value is lower than models1's, the log-transformed model performed better in this scenario.